#+TITLE: WAI Request Rate Limiting Middleware
#+AUTHOR: Christopher Reichert
#+EMAIL: creichert07@gmail.com
#+LINK: badge-hackage https://img.shields.io/hackage/v/wai-middleware-throttle.svg?dummy
#+LINK: hackage       https://hackage.haskell.org/package/wai-middleware-throttle
#+LINK: issues        https://github.com/creichert/wai-middleware-throttle/issues

[[https://travis-ci.org/creichert/wai-middleware-throttle][https://travis-ci.org/creichert/wai-middleware-throttle.svg?branch=master]]
[[https://github.com/creichert/wai-middleware-throttle/blob/master/LICENSE][https://img.shields.io/badge/license-BSD3-green.svg?dummy]]


Rate Limit and Throttle WAI Requests

** Examples
**** Default (IP address throttler)
     #+BEGIN_SRC haskell
     main = do
       let expirationInterval = TimeSpec 3600 0 -- expire after an hour
           settings = defaultThrottleSettings expirationInterval
       th <- initThrottler settings extractAddress
       let payload  = "{ \"api\", \"return data\" }"
           app = throttle th $ \_ f -> f (responseLBS status200 [] payload)
       Warp.run 3000 app
     #+END_SRC
**** Custom throttler (like an Authorization header)
     #+BEGIN_SRC haskell
     newtype MyData = MyData { unData :: Text } deriving (Eq, Ord, Show, Hashable)
     extractData :: Request -> Either Response MyData
     extractData = maybe (Left "No authorization header") (Right . decodeUtf8 . snd) $
       find ((== hAuthorization) . fst) . requestHeaders
     main = do
       let expirationInterval = TimeSpec 3600 0 -- expire after an hour
           settings = defaultThrottleSettings expirationInterval
       th <- initThrottler settings extractData
       let payload = "{ \"api\", \"return data\" }"
           app = throttle th $ \_ f -> f (responseLBS status200 [] payload)
       Warp.run 3000 app
     #+END_SRC

** Migration from Old API
In migrating from the old API to the new one, the following changes are required:
    - `defaultThrottleSettings` now takes another parameter for the expiration interval of the cache
    - `initThrottler` now takes the settings
      - `initCustomThrottler` now takes the settings and a function to extract the key that was
        previously a method in the RequestHashable class
    - `throttle` no longer takes the settings
